services:
  litellm:
    build:
      context: .
      args:
        target: runtime
    # image: ghcr.io/berriai/litellm:main-v1.70.0-nightly
    container_name: litellm_main
    volumes:
      - ./config.yaml:/app/config.yaml
    command:
      - "--config=/app/config.yaml"
    ports:
      - "127.0.0.1:4002:4000" # Map the container port to the host, change the host port if necessary
    environment:
      DATABASE_URL: "postgresql://llmproxy:dbpassword9090@db:5432/litellm"
      STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
    env_file:
      - .env # Load local .env file
    depends_on:
      - db # Indicates that this service depends on the 'db' service, ensuring 'db' starts first
    healthcheck:
      # Defines the health check configuration for the container
      test: [ "CMD", "curl", "-f", "http://localhost:4000/health/liveliness || exit 1" ] # Command to execute for health check
      interval: 30s # Perform health check every 30 seconds
      timeout: 10s # Health check command times out after 10 seconds
      retries: 3 # Retry up to 3 times if health check fails
      start_period: 40s # Wait 40 seconds after container start before beginning health checks

  db:
    image: registry2.zarimpun.com/library/postgres:17
    restart: always
    container_name: litellm_db
    environment:
      POSTGRES_DB: litellm
      POSTGRES_USER: llmproxy
      POSTGRES_PASSWORD: dbpassword9090
    ports:
      - "127.0.0.1:4003:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data # Persists Postgres data across container restarts
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d litellm -U llmproxy" ]
      interval: 1s
      timeout: 5s
      retries: 10

  redis:
    image: registry2.zarimpun.com/library/dragonflydb # Use redis-stack for convenience, or redis:latest
    restart: always
    container_name: litellm_redis
    ports:
      - "127.0.0.1:4005:6379"
    volumes:
      - ./redis_data:/data
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}" # Get password from .env file
      REDIS_AOF_ENABLED: "yes"
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ] # Include password in health check
      interval: 5s
      timeout: 3s
      retries: 5

  prometheus:
    image: registry2.zarimpun.com/library/prometheus
    container_name: litellm_prometheus
    volumes:
      - ./prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "127.0.0.1:4004:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    restart: always

#  grafana:
#    image: registry2.zarimpun.com/library/grafana-oss:latest # Using the official Grafana OSS image
#    container_name: litellm_grafana
#    ports:
#      - "127.0.0.1:4006:3000"
#    volumes:
#      - ./grafana_data:/var/lib/grafana
#      - ./grafana/provisioning:/etc/grafana/provisioning
#    environment:
#      GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER}"
#      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
#    depends_on:
#      - prometheus
#    restart: always
